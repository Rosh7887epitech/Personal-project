name: my_chocolatine

on:
  push:
    branches-ignore:
    - "ga-ignore-*"
  pull_request:
    branches-ignore:
    - "ga-ignore-*"

env:
  MIRROR_URL: "git@github.com:EpitechPromo2028/B-PSU-200-NAN-2-1-42sh-romain.berard.git"
  EXECUTABLES: "42sh"

jobs:
  is_mirroring_rep:
    runs-on: ubuntu-latest
    if: ${{!startsWith(github.repositoryUrl, 'git://github.com/EpitechPromo2028')}}
    steps:
    - name: Is_good_repo
      run: |

  check_coding_style:
    needs: is_mirroring_rep
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run coding-style . .
        run: check.sh $(pwd) $(pwd)
      - name: Display coding style errors
        run: |
          my_output=/$(pwd)/coding-style-reports.log
          while IFS= read -r -a line; do
            my_output=($(printf "%s" "$line" | cut -d':' --output-delimiter=' ' -f1-))
            echo "::error title=${my_output[2]} coding style error,file=${my_output[0]},line=${my_output[1]}::${my_output[3]}"
          done < $my_output
      - name: Check if there are style errors
        run: |
          ERROR=$(cat /$(pwd)/coding-style-reports.log | wc -l)
          if [ $ERROR -gt 0 ]; then
            exit 1
          fi

  check_program_compilation:
    needs: is_mirroring_rep
    runs-on: ubuntu-latest
    timeout-minutes: 2
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: compile project
        run: make
      - name: clean project
        run: make clean
      - name: is_executable
        run: |
          OIFS=$IFS
          IFS=','
          for binarie in $EXECUTABLES
            do
              ./$binarie
            done
          IFS=$OIFS

  run_tests:
    needs: is_mirroring_rep
    runs-on: ubuntu-latest
    timeout-minutes: 2
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: execute tests
        run: make tests_run

  push_to_mirror:
    runs-on: ubuntu-latest
    needs: [is_mirroring_rep, run_tests, check_program_compilation, check_coding_style]
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{env.MIRROR_URL}}
          ssh_private_key: ${{secrets.GIT_SSH_PRIVATE_KEY}}
