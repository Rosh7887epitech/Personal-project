#!/usr/bin/python3

from math import *
import sys

#!/usr/bin/python3

import sys
import math

def translation(i, j, x, y) :
     print("Translation along vector (", int(i), ", ", int(j), ")", sep = "")

def rotation(alpha, x, y) :
     print("Rotation by a ", int(alpha), " degree angle", sep = "")

def reflexion(alpha, x, y) :
     print("Reflection over an axis with an inclination angle of ", int(alpha), " degrees", sep = "")

def scaling(i, j, x, y):
     print("Scaling by factors ", int(j), " and ", int(i), sep="")
def main() :

     try :
          x = sys.argv[1]
          y = sys.argv[2]
          intx = float(x)
          inty = float(y)
     except IndexError :
          sys.exit(84)
     matrice = [1.00, 0.00, 0.00,
               0.00, 1.00, 0.00,
               0.00, 0.00, 1.00]
     i = 3

     for i in range(len(sys.argv)) :
          try: 
               x0 = float(sys.argv[1])
               x1 = float(sys.argv[2])
               x2 = float(sys.argv[4])
          except ValueError:
               sys.exit(84)
          if sys.argv[i] == "-t" :
               if(len(sys.argv) != 6):
                    sys.exit(84)
               translation(float(sys.argv[i + 1]), float(sys.argv[i + 2]), float(x), float(y))
               matrice[2] = float(sys.argv[i + 1]) + matrice[2]
               matrice[5] = float(sys.argv[i + 2]) + matrice[5]
          if sys.argv[i] == "-h" :
               print("USAGE")
               print("   ./102architect x y transfo1 arg11 [arg12] [transfo2 arg21 [arg22]] ...")
               print("DESCRIPTION")
               print("   x abscissa of the original point\n   y ordinate of the original point\n")
               print("   transfo arg1 [arg2]\n   -t i j translation along vector (i, j)\n   -z m n scaling by factors m (x-axis) and n (y-axis)\n   -r d rotation centered in O by a d degree angle\n   -s d reflection over the axis passing through O with an inclination\n   angle of d degree")
          if sys.argv[i] == "-r" :
               if(len(sys.argv) != 5):
                    sys.exit(84)
               rotation(float(sys.argv[i + 1]), int(x), int(y))
               matrice[0] = math.cos(float(sys.argv[i + 1]) / 180 * math.pi)
               matrice[1] = -math.sin(float(sys.argv[i + 1]) / 180 * math.pi)
               matrice[3] = math.sin(float(sys.argv[i + 1]) / 180 * math.pi)
               matrice[4] = matrice[0]
          if sys.argv[i] == "-s" :
               if(len(sys.argv) != 5):
                    sys.exit(84)
               reflexion(float(sys.argv[i + 1]), int(x), int(y))
               matrice[0] = math.cos(2 * float(sys.argv[i + 1]) / 180 * math.pi)
               matrice[1] = math.sin(2 * float(sys.argv[i + 1]) / 180 * math.pi)
               matrice[3] = math.sin(2 * float(sys.argv[i + 1]) / 180 * math.pi)
               matrice[4] = -matrice[0]
          if sys.argv[i] == "-z" :
               if(len(sys.argv) != 6):
                    sys.exit(84)
               scaling(float(sys.argv[5]), float(sys.argv[4]), int(x), int(y))
               matrice[0] = float(sys.argv[4])
               matrice[4] = float(sys.argv[5])


     print("%.2f"%matrice[0], "\t%.2f"%matrice[1], "\t%.2f"%matrice[2], sep = "")
     print("%.2f"%matrice[3], "\t%.2f"%matrice[4], "\t%.2f"%matrice[5], sep = "")
     print("%.2f"%matrice[6], "\t%.2f"%matrice[7], "\t%.2f"%matrice[8], sep = "")
     first = matrice[0] * intx + matrice[1] * inty + matrice[2]
     second = matrice[3] * intx + matrice[4] * inty + matrice[5]
     print("(%.2f"%intx,", %.2f"%inty,") => (%.2f"%first,", %.2f"%second,")", sep = "")

main()